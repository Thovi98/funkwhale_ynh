#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
is_public=$YNH_APP_ARG_IS_PUBLIC
admin=$YNH_APP_ARG_ADMIN

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info "Validating installation parameters..."

final_path="/var/www/$app"
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" admin "$admin"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info "Configuring firewall..."

# Find a free port
port=$(ynh_find_port 5000)
# Open this port
ynh_app_setting_set "$app" port "$port"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info "Creating a PostgreSQL database..."

ynh_psql_test_if_first_run

db_name=$(ynh_sanitize_dbid "$app")
db_user=$db_name
db_pwd=$(ynh_string_random)
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" psqlpwd "$db_pwd"

# Initialize database and store postgres password for upgrade
ynh_psql_setup_db --db_name="$db_name" --db_user="$db_user" --db_pwd="$db_pwd"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files..."

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path/code"
ynh_setup_source "$final_path/code" "app-frontend"

(
	cd "$final_path"
	mkdir -p code/config code/api code/data/static media import code/front
)

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Configuring nginx web server..."

# add funkwhale specifics at the beginning of the domain configuration
funkwhale_nginx_domain_configure

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Configuring system user..."

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# PYTHON DEPENDENCIES
#=================================================

virtualenv -p python3 "$final_path/code/virtualenv"
(
	set +o nounset
	source "${final_path}/code/virtualenv/bin/activate"
	set -o nounset
	pip install --upgrade pip
	pip install --upgrade setuptools
	pip install wheel
	pip install -r "${final_path}/code/api/requirements.txt"
)

#=================================================
# MODIFY THE CONFIG FILE
#=================================================

configfile="$final_path/code/config/.env"

cp ../conf/env.prod "$configfile"

key=$(ynh_string_random)
redis_db=$(ynh_redis_get_free_db)

ynh_app_setting_set "$app" key "$key"
ynh_app_setting_set "$app" redis_db "$redis_db"

ynh_replace_string "__REDIS_DB__"  "$redis_db"    "$configfile"
ynh_replace_string "__PORT__"      "$port"        "$configfile"
ynh_replace_string "__DOMAIN__"    "$domain"      "$configfile"
ynh_replace_string "__DBUSER__"    "$db_name"     "$configfile"
ynh_replace_string "__DBPWD__"     "$db_pwd"      "$configfile"
ynh_replace_string "__DBNAME__"    "$app"         "$configfile"
ynh_replace_string "__FINALPATH__" "$final_path"  "$configfile"
ynh_replace_string "__KEY__"       "$key"         "$configfile"

loadfile="$final_path/code/load_env"

cat > "$loadfile" <<'EOL'
#!/bin/bash
export $(cat "__FINALPATH__/code/config/.env" | grep -v ^# | xargs)
EOL

chmod +x "$loadfile"

ynh_replace_string "__FINALPATH__" "$final_path"  "$loadfile"

#=================================================
# CONFIGURE ADMIN USER
#=================================================

admin_mail=$(ynh_user_get_info "$admin" "mail")
(
	set +o nounset
	source "${final_path}/code/virtualenv/bin/activate"
	source "$loadfile"
	set -o nounset
	cd "$final_path/code/"

	# needed for enabling the 'unaccent' extension
	ynh_psql_execute_as_root --sql="ALTER USER $db_user WITH SUPERUSER;" --database="$db_name"
	python api/manage.py migrate
	ynh_psql_execute_as_root --sql="ALTER USER $db_user WITH NOSUPERUSER;" --database="$db_name"
	echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('$admin', '$admin_mail', 'funkwhale') " | python api/manage.py shell
	python api/manage.py collectstatic
)

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Configuring a systemd service..."
cp ../conf/funkwhale.target "/etc/systemd/system/$app.target"
ynh_replace_string "__APP__"    "$app"   "/etc/systemd/system/$app.target"

# Create a dedicated systemd config
ynh_add_systemd_config "$app-server" "funkwhale-server.service"
ynh_add_systemd_config "$app-worker" "funkwhale-worker.service"
ynh_add_systemd_config "$app-beat"   "funkwhale-beat.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R "$app": "$final_path"
chmod -R 755 "$final_path/code/front/dist/"

mkdir -p "/var/log/$app"
chown -R "$app": "/var/log/$app"

#=================================================
# SETUP FAIL2BAN
#=================================================

ynh_add_fail2ban_config "/var/log/nginx/$domain-access.log" "<HOST>.* \"POST /api/v1/token/ HTTP/1.1\" 400 68.*$" 5

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

yunohost service add "$app-server" --log "/var/log/$app/server.log"
yunohost service add "$app-worker" --log "/var/log/$app/worker.log"
yunohost service add "$app-beat"   --log "/var/log/$app/beat.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Configuring SSOwat..."

# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# makes sure no SSO credentials to be passed
	ynh_app_setting_set "$app" skipped_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START SERVICES
#=================================================
ynh_print_info "Start Services..."

ynh_systemd_action --action=start --service_name=${app}-beat --log_path=systemd --line_match="celery beat process"
ynh_systemd_action --action=start --service_name=${app}-server --log_path=systemd --line_match="Listening on TCP address"
ynh_systemd_action --action=start --service_name=${app}-worker --log_path=systemd --line_match="celery worker"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of $app completed"
